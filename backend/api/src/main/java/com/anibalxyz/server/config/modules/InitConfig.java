package com.anibalxyz.server.config.modules;

import com.fasterxml.jackson.databind.SerializationFeature;
import io.javalin.config.JavalinConfig;
import io.javalin.json.JavalinJackson;

/**
 * A {@link ServerConfig} module for applying initial, one-time configurations to the Javalin
 * server.
 *
 * <p>This class is responsible for setting up essential server features like JSON serialization
 * (with Jackson), enabling CORS, and registering default content types. This configuration is
 * applied once when the server starts.
 *
 * @author Generated by AI
 */
public class InitConfig implements ServerConfig {

  private final JavalinConfig javalinConfig;
  private final ServerEnvironment env;

  /**
   * Constructs an InitConfig.
   *
   * @param javalinConfig The Javalin configuration object to be modified.
   * @param env The application's server environment configuration, used for environment-specific
   *     behavior like CORS.
   * @author Generated by AI
   */
  public InitConfig(JavalinConfig javalinConfig, ServerEnvironment env) {
    this.javalinConfig = javalinConfig;
    this.env = env;
  }

  @Override
  public void apply() {
    javalinConfig.useVirtualThreads = true;
    javalinConfig.router.ignoreTrailingSlashes = true;
    javalinConfig.jetty.modifyServer(server -> server.setStopTimeout(5_000)); // graceful shutdown
    javalinConfig.http.defaultContentType = "application/json; charset=utf-8";
    // TODO: make allowed host injected by env variable
    javalinConfig.bundledPlugins.enableCors(
        cors ->
            cors.addRule(
                rule -> {
                  if ((env.APP_ENV().equals("development"))) {
                    rule.anyHost();
                  } else {
                    rule.allowHost("allowed.com");
                  }
                }));
    javalinConfig.jsonMapper(
        new JavalinJackson()
            .updateMapper(
                mapper -> mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)));
  }
}
