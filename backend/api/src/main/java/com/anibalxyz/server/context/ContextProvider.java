package com.anibalxyz.server.context;

import io.javalin.http.Context;

/**
 * Provides request-scoped access to the Javalin {@link Context} using a {@link ThreadLocal}.
 *
 * <p>This utility allows components deep within the application layers (e.g., an {@link
 * com.anibalxyz.persistence.EntityManagerProvider}) to access request-specific data without needing
 * the {@code Context} object to be passed down as a parameter through the entire call stack. The
 * context is set at the beginning of a request and cleared at the end.
 *
 * @author Generated by AI
 */
public class ContextProvider {
  private static final ThreadLocal<Context> contextThreadLocal = new ThreadLocal<>();

  /**
   * Associates the given {@link Context} with the current thread.
   *
   * @param ctx The Javalin context for the current request.
   * @author Generated by AI
   */
  public static void set(Context ctx) {
    contextThreadLocal.set(ctx);
  }

  /**
   * Removes the {@link Context} from the current thread to prevent memory leaks. This should be
   * called at the end of the request lifecycle.
   *
   * @author Generated by AI
   */
  public static void clear() {
    contextThreadLocal.remove();
  }

  /**
   * @return The {@link Context} associated with the current thread.
   */
  public static Context get() {
    return contextThreadLocal.get();
  }
}
