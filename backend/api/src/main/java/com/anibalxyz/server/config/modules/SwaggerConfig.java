package com.anibalxyz.server.config.modules;

import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.TextNode;
import io.javalin.config.JavalinConfig;
import io.javalin.openapi.plugin.OpenApiPlugin;
import io.javalin.openapi.plugin.swagger.SwaggerPlugin;

/**
 * Configuration for OpenAPI documentation and Swagger UI integration.
 *
 * <p>This configuration sets up comprehensive API documentation including detailed project
 * information, contact details, license information, and server configurations. The OpenAPI
 * specification follows industry standards and provides complete API documentation for the
 * Reconciler financial transaction reconciliation application.
 *
 * <p>Key features:
 *
 * <ul>
 *   <li>Comprehensive project metadata and description
 *   <li>Contact information and repository links
 *   <li>MIT license specification
 *   <li>Server configuration for different environments
 *   <li>Swagger UI integration with custom paths
 * </ul>
 *
 * @author Generated by AI
 */
public class SwaggerConfig implements ServerConfig {

  private final JavalinConfig javalinConfig;
  private final ServerEnvironment env;

  /**
   * Constructs a SwaggerConfig.
   *
   * @param javalinConfig The Javalin configuration object to be modified.
   * @param env The application's server environment configuration.
   */
  public SwaggerConfig(JavalinConfig javalinConfig, ServerEnvironment env) {
    this.javalinConfig = javalinConfig;
    this.env = env;
  }

  /**
   * {@inheritDoc}
   */
  @Override
  public void apply() {
    String infoDescription =
"""
Financial transaction reconciliation API for teams to reconcile transactions between bank statements and internal
systems. Built with clean architecture principles, domain-driven design, and comprehensive testing strategies.
""";
    javalinConfig.registerPlugin(
        new OpenApiPlugin(
            openApiConfig ->
                openApiConfig
                    .withDocumentationPath("/openapi")
                    .withDefinitionConfiguration(
                        (version, definition) ->
                            definition
                                .withInfo(
                                    info ->
                                        info.title("Reconciler API")
                                            .version("1.0-SNAPSHOT")
                                            .description(infoDescription)
                                            // .termsOfService
                                            // ("https://github.com/anibalxyz/reconciler/blob/main/README.md")
                                            .contact(
                                                "Anibal Boggio",
                                                "https://github.com/anibalxyz",
                                                env.CONTACT_EMAIL())
                                            .license(
                                                "MIT License",
                                                "https://github.com/anibalxyz/reconciler/blob/main/LICENSE",
                                                "MIT"))
                                .withServer(
                                    server ->
                                        server
                                            .description(env.APP_ENV() + " server")
                                            .url(env.API_URL()))
                                .withDefinitionProcessor(
                                    content -> {
                                      ObjectNode externalDocs = content.objectNode();
                                      externalDocs.set(
                                          "description",
                                          new TextNode("Project Repository and Documentation"));
                                      externalDocs.set(
                                          "url",
                                          new TextNode("https://github.com/anibalxyz/reconciler"));
                                      content.set("externalDocs", externalDocs);

                                      // Add global tags for the API organization
                                      var tagsArray = content.arrayNode();

                                      var usersTag = content.objectNode();
                                      usersTag.set("name", new TextNode("Users"));
                                      usersTag.set(
                                          "description",
                                          new TextNode(
                                              """
                                              User management operations including CRUD functionality,
                                              authentication, and authorization features.
                                              """
                                                  .trim()));
                                      tagsArray.add(usersTag);

                                      content.set("tags", tagsArray);

                                      return content.toPrettyString();
                                    }))));

    javalinConfig.registerPlugin(
        new SwaggerPlugin(
            swaggerConfig -> {
              swaggerConfig.setUiPath("/swagger");
            }));
  }
}
