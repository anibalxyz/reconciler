package com.anibalxyz.server;

import com.anibalxyz.persistence.PersistenceManager;
import com.anibalxyz.server.config.environment.ApplicationConfiguration;
import com.anibalxyz.server.config.modules.ExceptionsConfig;
import com.anibalxyz.server.config.modules.InitConfig;
import com.anibalxyz.server.config.modules.LifeCycleConfig;
import com.anibalxyz.server.config.modules.ServerConfig;
import com.anibalxyz.server.context.JavalinContextEntityManagerProvider;
import com.anibalxyz.server.routes.RouteRegistry;
import com.anibalxyz.server.routes.SystemRoutes;
import com.anibalxyz.users.api.UserRoutes;
import io.javalin.Javalin;
import java.util.List;

/**
 * The main application class, acting as the Composition Root.
 *
 * <p>This class is responsible for initializing and wiring together all major components of the
 * application, including the web server (Javalin), persistence layer (PersistenceManager),
 * dependency container, and all configurations and routes. It provides factory methods to create an
 * instance tailored for different environments (e.g., test, development).
 *
 * @author Generated by AI
 */
public class Application {

  private final Javalin javalin;
  private final PersistenceManager persistenceManager;
  private final ApplicationConfiguration config;

  /**
   * Private constructor to enforce instantiation via factory methods.
   *
   * @param javalin The configured Javalin instance.
   * @param persistenceManager The configured PersistenceManager.
   * @param config The application configuration.
   * @author Generated by AI
   */
  private Application(
      Javalin javalin, PersistenceManager persistenceManager, ApplicationConfiguration config) {
    this.javalin = javalin;
    this.persistenceManager = persistenceManager;
    this.config = config;
  }

  /**
   * Creates and configures an {@link Application} instance for the 'test' environment.
   *
   * <p>This factory method sets up the entire application stack, including the persistence layer,
   * dependency container, server configurations, and route registries, all tailored for automated
   * testing.
   *
   * @param config The application configuration, loaded for the test environment.
   * @return A fully configured {@code Application} instance ready for testing.
   * @author Generated by AI
   */
  public static Application createForTest(ApplicationConfiguration config) {
    PersistenceManager persistenceManager = new PersistenceManager(config.database());

    Javalin server =
        Javalin.create(javalinConfig -> new InitConfig(javalinConfig, config.env()).apply());

    DependencyContainer container =
        new DependencyContainer(config.env(), new JavalinContextEntityManagerProvider());

    List<RouteRegistry> routeRegistries =
        List.of(
            new UserRoutes(server, container.getUserController()),
            new SystemRoutes(server, persistenceManager));
    List<ServerConfig> serverConfigs =
        List.of(new LifeCycleConfig(server, persistenceManager), new ExceptionsConfig(server));

    routeRegistries.forEach(RouteRegistry::register);
    serverConfigs.forEach(ServerConfig::apply);

    return new Application(server, persistenceManager, config);
  }

  /**
   * Creates and configures an {@link Application} instance for the 'development' environment.
   *
   * <p>This factory method sets up the entire application stack, including the persistence layer,
   * dependency container, server configurations, and route registries, all tailored for local
   * development.
   *
   * @param config The application configuration, loaded for the development environment.
   * @return A fully configured {@code Application} instance ready for development.
   * @author Generated by AI
   */
  public static Application createForDevelopment(ApplicationConfiguration config) {
    PersistenceManager persistenceManager = new PersistenceManager(config.database());

    Javalin server =
        Javalin.create(javalinConfig -> new InitConfig(javalinConfig, config.env()).apply());

    DependencyContainer container =
        new DependencyContainer(config.env(), new JavalinContextEntityManagerProvider());

    List<RouteRegistry> routeRegistries =
        List.of(
            new UserRoutes(server, container.getUserController()),
            new SystemRoutes(server, persistenceManager));
    List<ServerConfig> serverConfigs =
        List.of(new LifeCycleConfig(server, persistenceManager), new ExceptionsConfig(server));

    routeRegistries.forEach(RouteRegistry::register);
    serverConfigs.forEach(ServerConfig::apply);

    return new Application(server, persistenceManager, config);
  }

  /**
   * A general factory method that creates an {@link Application} instance based on the environment
   * specified in the configuration.
   *
   * @param config The application configuration.
   * @return A new {@code Application} instance for the appropriate environment.
   * @throws IllegalStateException if the environment in the config is unknown.
   * @author Generated by AI
   */
  public static Application create(ApplicationConfiguration config) {
    String appEnv = config.env().APP_ENV();
    if (appEnv.equals("development")) {
      // TODO: also used in "production", for the moment both are the same
      return createForDevelopment(config);
    }
    if (appEnv.equals("test")) {
      return createForTest(config);
    }
    throw new IllegalStateException("Unknown environment: " + appEnv);
  }

  /**
   * @return The underlying Javalin server instance.
   */
  public Javalin javalin() {
    return javalin;
  }

  /**
   * @return The application's persistence manager.
   */
  public PersistenceManager persistenceManager() {
    return persistenceManager;
  }

  /**
   * @return The application's configuration object.
   */
  public ApplicationConfiguration config() {
    return config;
  }

  /**
   * Starts the web server on the specified port.
   *
   * @param port The port to listen on.
   * @author Generated by AI
   */
  public void start(int port) {
    javalin.start(port);
  }

  /**
   * Stops the web server and shuts down the persistence layer gracefully.
   *
   * @author Generated by AI
   */
  public void stop() {
    javalin.stop();
    persistenceManager.shutdown();
  }
}
