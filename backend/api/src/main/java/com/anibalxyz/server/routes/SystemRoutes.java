package com.anibalxyz.server.routes;

import com.anibalxyz.persistence.PersistenceManager;
import io.javalin.Javalin;
import jakarta.persistence.EntityManager;
import java.util.Map;

/**
 * A {@link RouteRegistry} for system-level endpoints.
 *
 * <p>This class defines routes for system monitoring and health checks, such as the {@code /health}
 * endpoint, which verifies application status and database connectivity.
 *
 * @author Generated by AI
 */
public class SystemRoutes extends RouteRegistry {

  private final PersistenceManager persistenceManager;

  /**
   * Constructs a SystemRoutes object.
   *
   * @param server The Javalin server instance.
   * @param persistenceManager The manager for the persistence layer, used to check DB status.
   * @author Generated by AI
   */
  public SystemRoutes(Javalin server, PersistenceManager persistenceManager) {
    super(server);
    this.persistenceManager = persistenceManager;
  }

  /** Registers the {@code /health} endpoint. */
  @Override
  public void register() {
    server.get(
        "/health",
        ctx -> {
          boolean dbIsConnected;

          try (EntityManager em = persistenceManager.emf().createEntityManager()) {
            em.createNativeQuery("SELECT 1").getSingleResult();
            dbIsConnected = true;
          } catch (Exception e) {
            dbIsConnected = false;
          }

          ctx.json(Map.of("status", dbIsConnected));
        });
  }
}
