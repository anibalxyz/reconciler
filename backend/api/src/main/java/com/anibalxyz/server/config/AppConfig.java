package com.anibalxyz.server.config;

import com.anibalxyz.persistence.DatabaseVariables;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

/**
 * Manages application configuration by loading environment variables and properties.
 *
 * <p>This class centralizes access to configuration data, such as database credentials and
 * application-level settings (e.g., BCrypt rounds). It can load settings from either system
 * environment variables or a {@code .env.*} file, adapting to different runtime environments like
 * production, development, or testing.
 *
 * @author Generated by AI
 */
public class AppConfig {
  // Fixed default port in PostgreSQL container
  private static final String DEFAULT_DB_PORT = "5432";
  // Used when running locally because container is mapped to localhost
  private static final String DEFAULT_LOCAL_HOST = "localhost";

  /** Holds application-level settings like the current environment and BCrypt rounds. */
  private final AppEnvironmentSource env;

  /** Holds database connection details like the URL, user, and password. */
  private final DatabaseVariables database;

  /**
   * Private constructor to enforce instantiation via factory methods.
   *
   * @param env The set of application environment variables.
   * @param database The set of database connection variables.
   * @author Generated by AI
   */
  private AppConfig(AppEnvironmentSource env, DatabaseVariables database) {
    this.env = env;
    this.database = database;
  }

  /**
   * Loads configuration specifically for the test environment.
   *
   * <p>It first checks for system environment variables. If not found, it falls back to loading
   * from the {@code .env.test} file.
   *
   * @return An {@link AppConfig} instance for testing.
   * @author Generated by AI
   */
  public static AppConfig loadForTest() {
    if (System.getenv("APP_ENV") != null) {
      return loadFromEnv();
    }
    return loadFromEnvFile("test");
  }

  // TODO: add Hikari configuration from env variables or env file
  /**
   * Loads configuration from system environment variables. This is the standard method for
   * containerized environments like production.
   *
   * @return A new {@link AppConfig} instance.
   * @author Generated by AI
   */
  public static AppConfig loadFromEnv() {
    String appEnv = System.getenv("APP_ENV");
    String host = System.getenv("DB_HOST");
    String name = System.getenv("DB_NAME");
    String user = System.getenv("DB_USER");
    String password = System.getenv("DB_PASSWORD");

    int bcryptLogRounds = Integer.parseInt(System.getenv("BCRYPT_LOG_ROUNDS"));
    AppEnvironmentSource env = new AppEnvironmentSource(appEnv, bcryptLogRounds);

    return new AppConfig(
        env, DatabaseVariables.generate(host, DEFAULT_DB_PORT, name, user, password));
  }

  /**
   * Loads configuration from a {@code .env.{appEnv}} file from the project's root. This is
   * primarily used for local development and testing.
   *
   * @param appEnv The environment suffix (e.g., "development", "test").
   * @return A new {@link AppConfig} instance.
   * @throws IllegalStateException if the specified .env file cannot be loaded.
   * @author Generated by AI
   */
  public static AppConfig loadFromEnvFile(String appEnv) {
    Properties props = new Properties();
    try (InputStream in = new FileInputStream("../.env." + appEnv)) {
      props.load(in);
    } catch (IOException e) {
      throw new IllegalStateException("Could not load .env file for configuration", e);
    }
    String port = props.getProperty("DB_PORT");
    String name = props.getProperty("DB_NAME");
    String user = props.getProperty("DB_USER");
    String password = props.getProperty("DB_PASSWORD");

    int bcryptLogRounds = Integer.parseInt(props.getProperty("BCRYPT_LOG_ROUNDS"));
    AppEnvironmentSource env = new AppEnvironmentSource(appEnv, bcryptLogRounds);

    return new AppConfig(
        env, DatabaseVariables.generate(DEFAULT_LOCAL_HOST, port, name, user, password));
  }

  /**
   * Returns the set of application-level environment variables.
   *
   * @return An {@link AppEnvironmentSource} containing the application's environment configuration.
   */
  public AppEnvironmentSource env() {
    return env;
  }

  /**
   * Returns the set of database connection variables.
   *
   * @return A {@link DatabaseVariables} object containing the database connection configuration.
   */
  public DatabaseVariables database() {
    return database;
  }
}
