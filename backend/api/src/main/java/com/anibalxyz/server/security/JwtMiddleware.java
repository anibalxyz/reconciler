package com.anibalxyz.server.security;

import com.anibalxyz.features.auth.application.JwtService;
import com.anibalxyz.features.auth.application.exception.InvalidCredentialsException;
import io.javalin.http.Context;
import io.javalin.http.Handler;
import io.javalin.http.UnauthorizedResponse;
import org.jetbrains.annotations.NotNull;

/**
 * Javalin handler that acts as a JWT authentication filter.
 *
 * <p>This filter intercepts incoming requests, extracts the JWT from the Authorization header,
 * validates it using {@link JwtService}, and if valid, extracts the user ID from the token and
 * stores it in the request context for subsequent handlers.
 *
 * @author Generated by AI
 */
public class JwtMiddleware implements Handler {

  public static final String JWT_USER_ID = "jwt_userId";
  private static final String AUTHORIZATION_HEADER = "Authorization";
  private static final String BEARER_PREFIX = "Bearer ";
  private final JwtService jwtService;

  /**
   * Constructs a JwtMiddleware.
   *
   * @param jwtService The JWT service for token validation and claim extraction.
   */
  public JwtMiddleware(JwtService jwtService) {
    this.jwtService = jwtService;
  }

  /** {@inheritDoc} */
  @Override
  public void handle(@NotNull Context ctx) {
    String authHeader = ctx.header(AUTHORIZATION_HEADER);

    if (authHeader == null || !authHeader.startsWith(BEARER_PREFIX)) {
      throw new UnauthorizedResponse("Missing or invalid Authorization header");
    }

    String token = authHeader.substring(BEARER_PREFIX.length());

    try {
      Integer userId = Integer.parseInt(jwtService.validateToken(token).getSubject());
      ctx.attribute(JWT_USER_ID, userId);
    } catch (InvalidCredentialsException e) {
      throw new UnauthorizedResponse(e.getMessage());
    }
  }
}
