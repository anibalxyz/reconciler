package com.anibalxyz.server.config.modules;

import com.anibalxyz.features.auth.application.RefreshTokenService;
import com.anibalxyz.server.config.modules.definitions.RuntimeConfig;
import io.javalin.Javalin;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Configuration module for scheduling background tasks, such as refresh token cleanup.
 *
 * <p>This class initializes and manages a {@link ScheduledExecutorService} to run periodic tasks.
 * It ensures that tasks are scheduled upon application startup and gracefully shut down when the
 * application stops.
 *
 * @author Generated by AI
 */
public class SchedulerConfig extends RuntimeConfig {

  private static final Logger log = LoggerFactory.getLogger(SchedulerConfig.class);
  private final RefreshTokenService refreshTokenService;
  private ScheduledExecutorService scheduler;

  /**
   * Constructs a new SchedulerConfig.
   *
   * @param server The Javalin server instance.
   * @param refreshTokenService The service responsible for refresh token operations.
   */
  public SchedulerConfig(Javalin server, RefreshTokenService refreshTokenService) {
    super(server);
    this.refreshTokenService = refreshTokenService;
  }

  /** {@inheritDoc} */
  @Override
  public void apply() {
    scheduler = Executors.newSingleThreadScheduledExecutor();

    scheduler.scheduleAtFixedRate(
        () -> {
          int deletedCount = refreshTokenService.cleanupExpiredTokens();
          log.info("Finished scheduled refresh token cleanup. Deleted {} tokens.", deletedCount);
        },
        0,
        24,
        TimeUnit.HOURS);

    server.events(
        event -> {
          event.serverStopping(
              () -> {
                scheduler.shutdown();
                try {
                  if (!scheduler.awaitTermination(5, TimeUnit.SECONDS)) {
                    scheduler.shutdownNow();
                  }
                } catch (InterruptedException e) {
                  scheduler.shutdownNow();
                  Thread.currentThread().interrupt();
                }
              });
        });
  }
}
