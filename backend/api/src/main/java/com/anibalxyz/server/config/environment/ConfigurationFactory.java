package com.anibalxyz.server.config.environment;

import com.anibalxyz.persistence.DatabaseVariables;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import java.util.function.Function;

/**
 * A factory for creating application configuration from various sources.
 *
 * <p>This class centralizes the logic for loading configuration data, such as database credentials
 * and application-level settings. It can load settings from either system environment variables or
 * a {@code .env.*} file, adapting to different runtime environments.
 *
 * @author Generated by AI
 */
public class ConfigurationFactory {
  // Fixed default port in PostgreSQL container
  private static final String DEFAULT_DB_PORT = "5432";
  // Used when running locally because container is mapped to localhost
  private static final String DEFAULT_LOCAL_HOST = "localhost";

  /** Private constructor to prevent instantiation of this utility class. */
  private ConfigurationFactory() {}

  /**
   * Loads configuration specifically for the test environment.
   *
   * <p>It first checks for system environment variables. If not found, it falls back to loading
   * from the {@code .env.test} file.
   *
   * @return An {@link ApplicationConfiguration} instance for testing.
   * @author Generated by AI
   */
  public static ApplicationConfiguration loadForTest() {
    if (System.getenv("APP_ENV") != null) {
      return loadFromEnv();
    }
    return loadFromEnvFile("test");
  }

  // TODO: add Hikari configuration from env variables
  /**
   * Loads configuration from system environment variables. This is the standard method for
   * containerized environments like production.
   *
   * @return A new {@link ApplicationConfiguration} instance.
   * @author Generated by AI
   */
  public static ApplicationConfiguration loadFromEnv() {
    String appEnv = getEnvVar("APP_ENV", System::getenv);
    String host = getEnvVar("DB_HOST", System::getenv);
    String name = getEnvVar("DB_NAME", System::getenv);
    String user = getEnvVar("DB_USER", System::getenv);
    String password = getEnvVar("DB_PASSWORD", System::getenv);
    String apiUrl = "http://localhost:" + getEnvVar("API_PORT", System::getenv);
    String contactEmail = getEnvVar("CONTACT_EMAIL", System::getenv);

    int bcryptLogRounds = Integer.parseInt(getEnvVar("BCRYPT_LOG_ROUNDS", System::getenv));
    AppEnvironmentSource env =
        new AppEnvironmentSource(appEnv, bcryptLogRounds, apiUrl, contactEmail);

    return new ApplicationConfiguration(
        env, DatabaseVariables.generate(host, DEFAULT_DB_PORT, name, user, password));
  }

  /**
   * Loads configuration from a {@code .env.{appEnv}} file from the project's root. This is
   * primarily used for local development and testing.
   *
   * @param appEnv The environment suffix (e.g., "development", "test").
   * @return A new {@link ApplicationConfiguration} instance.
   * @throws IllegalStateException if the specified .env file cannot be loaded.
   * @author Generated by AI
   */
  public static ApplicationConfiguration loadFromEnvFile(String appEnv) {
    Properties props = new Properties();
    try (InputStream in = new FileInputStream("../.env." + appEnv)) {
      props.load(in);
    } catch (IOException e) {
      throw new IllegalStateException("Could not load .env file for configuration", e);
    }
    String port = getEnvVar("DB_PORT", props::getProperty);
    String name = getEnvVar("DB_NAME", props::getProperty);
    String user = getEnvVar("DB_USER", props::getProperty);
    String password = getEnvVar("DB_PASSWORD", props::getProperty);
    String apiUrl = "http://localhost:" + getEnvVar("API_PORT", props::getProperty);
    String contactEmail = getEnvVar("CONTACT_EMAIL", props::getProperty);

    int bcryptLogRounds = Integer.parseInt(getEnvVar("BCRYPT_LOG_ROUNDS", props::getProperty));
    AppEnvironmentSource env =
        new AppEnvironmentSource(appEnv, bcryptLogRounds, apiUrl, contactEmail);

    return new ApplicationConfiguration(
        env, DatabaseVariables.generate(DEFAULT_LOCAL_HOST, port, name, user, password));
  }

  // TODO: env variables origin could be selected here
  /**
   * Safely retrieves a configuration value from a given source.
   *
   * <p>This helper method abstracts the process of reading a configuration property, ensuring it is
   * not null or blank. It provides a clear, consistent error message if the property is missing,
   * which helps in diagnosing configuration issues quickly.
   *
   * @param name The name of the configuration property to retrieve (e.g., "DB_HOST").
   * @param source A function that takes the property name and returns its value (e.g.,
   *     System::getenv or props::getProperty).
   * @return The non-blank value of the configuration property.
   * @throws IllegalStateException if the property is missing (null) or blank.
   */
  private static String getEnvVar(String name, Function<String, String> source)
      throws IllegalStateException {
    String value = source.apply(name);
    if (value == null || value.isBlank()) {
      throw new IllegalStateException("Missing required configuration property: " + name);
    }
    return value;
  }
}
