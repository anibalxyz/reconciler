package com.anibalxyz.server;

import com.anibalxyz.features.auth.api.AuthApi;
import com.anibalxyz.features.auth.api.AuthController;
import com.anibalxyz.features.auth.application.AuthService;
import com.anibalxyz.features.auth.application.JwtService;
import com.anibalxyz.features.auth.application.RefreshTokenService;
import com.anibalxyz.features.auth.domain.RefreshTokenRepository;
import com.anibalxyz.features.auth.infra.JpaRefreshTokenRepository;
import com.anibalxyz.features.system.api.SystemController;
import com.anibalxyz.features.users.api.UserController;
import com.anibalxyz.features.users.application.UserService;
import com.anibalxyz.features.users.domain.UserRepository;
import com.anibalxyz.features.users.infra.JpaUserRepository;
import com.anibalxyz.persistence.EntityManagerProvider;
import com.anibalxyz.persistence.PersistenceManager;
import com.anibalxyz.server.config.environment.AppEnvironmentSource;
import com.anibalxyz.server.security.JwtMiddleware;
import io.javalin.Javalin;

/**
 * A manual dependency injection container for the application.
 *
 * <p>This class is responsible for instantiating and wiring together the application's services,
 * controllers, and repositories. It follows the "Pure DI" pattern, where dependencies are created
 * in a single composition root, making the application's object graph explicit and easy to manage
 * without a DI framework.
 *
 * @author Generated by AI
 */
public class DependencyContainer {
  private final Javalin server;
  private final UserController userController;
  private final AuthApi authController;
  private final SystemController systemController;
  private final RefreshTokenService refreshTokenService;

  private final JwtMiddleware jwtMiddleware;

  /**
   * Constructs the dependency container and initializes the object graph.
   *
   * @param server The Javalin instance to which routes will be attached.
   * @param env The application's environment configuration source.
   * @param emProvider The provider for the request-scoped EntityManager.
   * @param persistenceManager The application's persistence manager.
   */
  public DependencyContainer(
      Javalin server,
      AppEnvironmentSource env,
      EntityManagerProvider emProvider,
      PersistenceManager persistenceManager) {
    this.server = server;

    UserRepository userRepository = new JpaUserRepository(emProvider);
    UserService userService = new UserService(userRepository, env);
    userController = new UserController(userService);

    RefreshTokenRepository refreshTokenRepository = new JpaRefreshTokenRepository(emProvider);
    refreshTokenService = new RefreshTokenService(refreshTokenRepository, env);

    JwtService jwtService = new JwtService(env);
    AuthService authService = new AuthService(userService, jwtService, refreshTokenService);
    authController = new AuthController(authService);
    jwtMiddleware = new JwtMiddleware(jwtService);

    systemController = new SystemController(persistenceManager);
  }

  /**
   * @return The singleton instance of {@link UserController}.
   */
  public UserController userController() {
    return userController;
  }

  /**
   * @return The singleton instance of {@link AuthApi}.
   */
  public AuthApi authController() {
    return authController;
  }

  /**
   * @return The singleton instance of {@link SystemController}.
   */
  public SystemController systemController() {
    return systemController;
  }

  /**
   * @return The singleton instance of {@link JwtMiddleware}.
   */
  public JwtMiddleware jwtMiddleware() {
    return jwtMiddleware;
  }

  /**
   * @return The singleton instance of {@link RefreshTokenService}.
   */
  public RefreshTokenService refreshTokenService() {
    return refreshTokenService;
  }

  /**
   * @return The singleton instance of {@link Javalin}.
   */
  public Javalin server() {
    return server;
  }
}
