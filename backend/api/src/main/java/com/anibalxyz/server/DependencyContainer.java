package com.anibalxyz.server;

import com.anibalxyz.persistence.EntityManagerProvider;
import com.anibalxyz.persistence.PersistenceManager;
import com.anibalxyz.server.config.environment.AppEnvironmentSource;
import com.anibalxyz.system.api.SystemController;
import com.anibalxyz.users.api.UserController;
import com.anibalxyz.users.application.UserService;
import com.anibalxyz.users.domain.UserRepository;
import com.anibalxyz.users.infra.JpaUserRepository;

/**
 * A manual dependency injection container for the application.
 *
 * <p>This class is responsible for instantiating and wiring together the application's services,
 * controllers, and repositories. It follows the "Pure DI" pattern, where dependencies are created
 * in a single composition root, making the application's object graph explicit and easy to manage
 * without a DI framework.
 *
 * @author Generated by AI
 */
public class DependencyContainer {
  private final UserController userController;
  private final SystemController systemController;

  /**
   * Constructs the dependency container and initializes the object graph.
   *
   * @param env The application's environment configuration source.
   * @param emProvider The provider for the request-scoped EntityManager.
   */
  public DependencyContainer(
      AppEnvironmentSource env,
      EntityManagerProvider emProvider,
      PersistenceManager persistenceManager) {
    UserRepository userRepository = new JpaUserRepository(emProvider);
    UserService userService = new UserService(userRepository, env);
    userController = new UserController(userService);

    systemController = new SystemController(persistenceManager);
  }

  /**
   * @return The singleton instance of {@link UserController}.
   */
  public UserController getUserController() {
    return userController;
  }

  /**
   * @return The singleton instance of {@link SystemController}.
   */
  public SystemController getSystemController() {
    return systemController;
  }
}
