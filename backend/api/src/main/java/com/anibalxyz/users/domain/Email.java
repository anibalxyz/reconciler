package com.anibalxyz.users.domain;

import java.util.Locale;
import java.util.regex.Pattern;

/**
 * Represents a user's email address as an immutable value object.
 *
 * <p>This class ensures that any email address is valid and normalized (converted to lowercase and
 * trimmed) upon creation. It encapsulates validation logic, providing a type-safe way to handle
 * email addresses throughout the application.
 *
 * @param value The string representation of the email address.
 * @see <a href="https://docs.oracle.com/en/java/javase/17/language/records.html">JEP 395:
 *     Records</a>
 * @author Generated by AI
 */
public record Email(String value) {
  private static final Pattern EMAIL_PATTERN = Pattern.compile("^[\\w-.]+@[\\w-]+\\.[a-zA-Z]{2,}$");

  /**
   * Compact constructor for the Email record. It validates and normalizes the email value upon
   * instantiation.
   *
   * @throws IllegalArgumentException if the email format is invalid.
   * @author Generated by AI
   */
  public Email {
    if (!isValid(value)) {
      throw new IllegalArgumentException("Invalid email format: " + value);
    }
    value = normalize(value);
  }

  /**
   * Normalizes an email string by converting it to lowercase and trimming whitespace.
   *
   * @param email The email string to normalize.
   * @return The normalized email string.
   * @author Generated by AI
   */
  public static String normalize(String email) {
    return email.toLowerCase(Locale.ROOT).trim();
  }

  /**
   * Checks if a given string is a valid email format.
   *
   * @param email The email string to validate.
   * @return {@code true} if the email is valid, {@code false} otherwise.
   * @author Generated by AI
   */
  public static boolean isValid(String email) {
    return (email != null
        && !email.isBlank()
        && EMAIL_PATTERN.matcher(email).matches()
        && email.length() <= 255);
  }
}
