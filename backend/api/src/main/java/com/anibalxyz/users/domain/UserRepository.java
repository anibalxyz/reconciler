package com.anibalxyz.users.domain;

import java.util.List;
import java.util.Optional;

/**
 * An interface (port) defining the contract for user data persistence.
 *
 * <p>This repository is part of the domain layer and abstracts the data storage mechanism.
 * Implementations of this interface (adapters in the infrastructure layer) will handle the actual
 * database operations. It follows the Repository pattern, providing a collection-like interface for
 * accessing {@link User} domain objects.
 *
 * @author Generated by AI
 */
public interface UserRepository {
  /**
   * Retrieves all users from the data store.
   *
   * @return A list of all users. The list is empty if no users are found.
   * @author Generated by AI
   */
  List<User> findAll();

  /**
   * Finds a user by their unique ID.
   *
   * @param id The ID of the user to find.
   * @return An {@link Optional} containing the user if found, or an empty Optional if not.
   * @author Generated by AI
   */
  Optional<User> findById(Integer id);

  /**
   * Finds a user by their email address.
   *
   * @param email The email of the user to find.
   * @return An {@link Optional} containing the user if found, or an empty Optional if not.
   * @author Generated by AI
   */
  Optional<User> findByEmail(Email email);

  /**
   * Saves a user. This can be used for both creating a new user and updating an existing one.
   *
   * @param user The user to save.
   * @return The saved user, which will include a generated ID and timestamps.
   * @throws IllegalArgumentException if the user object is invalid for saving (e.g., constraint
   *     violation).
   * @author Generated by AI
   */
  User save(User user) throws IllegalArgumentException;

  /**
   * Deletes a user by their unique ID.
   *
   * @param id The ID of the user to delete.
   * @return {@code true} if a user was deleted, {@code false} otherwise.
   * @author Generated by AI
   */
  boolean deleteById(Integer id);
}
