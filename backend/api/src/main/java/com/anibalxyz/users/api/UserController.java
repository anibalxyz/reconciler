package com.anibalxyz.users.api;

import com.anibalxyz.users.api.in.UserCreateRequest;
import com.anibalxyz.users.api.in.UserUpdateRequest;
import com.anibalxyz.users.api.out.UserDetailResponse;
import com.anibalxyz.users.application.UserService;
import com.anibalxyz.users.application.exception.EntityNotFoundException;
import com.anibalxyz.users.domain.User;
import io.javalin.http.BadRequestResponse;
import io.javalin.http.Context;
import io.javalin.validation.ValidationException;
import java.util.List;

/**
 * Handles HTTP requests for the /users resource.
 *
 * <p>This class acts as the entry point for all user-related API calls. It is responsible for
 * parsing requests, calling the {@link UserService} to execute business logic, and formatting the
 * HTTP responses. It bridges the gap between the web layer (Javalin) and the application layer.
 *
 * @author Generated by AI
 */
public class UserController {
  private final UserService userService;

  /**
   * Constructs a UserController with the given user service.
   *
   * @param userService The application service for user operations.
   * @author Generated by AI
   */
  public UserController(UserService userService) {
    this.userService = userService;
  }

  /**
   * Handles the request to get all users. (GET /users)
   *
   * @param ctx The Javalin context object.
   * @author Generated by AI
   */
  public void getAllUsers(Context ctx) {
    List<User> users = userService.getAllUsers();
    List<UserDetailResponse> response = users.stream().map(UserMapper::toDetailResponse).toList();
    ctx.status(200).json(response);
  }

  /**
   * Handles the request to get a single user by their ID. (GET /users/{id})
   *
   * @param ctx The Javalin context object.
   * @throws BadRequestResponse if the ID is not a valid number.
   * @throws EntityNotFoundException if the user is not found.
   * @author Generated by AI
   */
  public void getUserById(Context ctx) throws BadRequestResponse, EntityNotFoundException {
    int id = getParamId(ctx);
    ctx.status(200).json(UserMapper.toDetailResponse(userService.getUserById(id)));
  }

  /**
   * Handles the request to create a new user. (POST /users)
   *
   * @param ctx The Javalin context object.
   * @throws ValidationException if the request body is invalid.
   * @throws IllegalArgumentException if the business rules for creation are violated (e.g.,
   *     duplicate email).
   * @author Generated by AI
   */
  public void createUser(Context ctx) throws IllegalArgumentException, ValidationException {
    UserCreateRequest request =
        ctx.bodyValidator(UserCreateRequest.class)
            .check(r -> r.name() != null && !r.name().isBlank(), "Name is required")
            .check(r -> r.email() != null && !r.email().isBlank(), "Email is required")
            .check(r -> r.password() != null && !r.password().isBlank(), "Password is required")
            .get();

    ctx.status(201).json(UserMapper.toCreateResponse(userService.createUser(request)));
  }

  /**
   * Handles the request to update an existing user. (PUT /users/{id})
   *
   * @param ctx The Javalin context object.
   * @throws BadRequestResponse if the ID is invalid or the request body is empty.
   * @throws ValidationException if the request body is invalid.
   * @throws EntityNotFoundException if the user to update is not found.
   * @throws IllegalArgumentException if business rules for update are violated (e.g., duplicate
   *     email).
   * @author Generated by AI
   */
  public void updateUserById(Context ctx)
      throws IllegalArgumentException,
          ValidationException,
          EntityNotFoundException,
          BadRequestResponse {
    int id = getParamId(ctx);

    String badRequestMessage = "At least one field (name, email, password) must be provided";

    UserUpdateRequest userUpdateRequest =
        ctx.bodyValidator(UserUpdateRequest.class)
            .check(UserUpdateRequest::hasAtLeastOneField, badRequestMessage)
            .get();

    ctx.status(200)
        .json(UserMapper.toDetailResponse(userService.updateUserById(id, userUpdateRequest)));
  }

  /**
   * Handles the request to delete a user by their ID. (DELETE /users/{id})
   *
   * @param ctx The Javalin context object.
   * @throws EntityNotFoundException if the user to delete is not found.
   * @throws BadRequestResponse if the ID is not a valid number.
   * @author Generated by AI
   */
  public void deleteUserById(Context ctx) throws EntityNotFoundException, BadRequestResponse {
    userService.deleteUserById(getParamId(ctx));
    ctx.status(204);
  }

  /**
   * Extracts and validates the 'id' path parameter from the context.
   *
   * @param ctx The Javalin context.
   * @return The validated integer ID.
   * @throws BadRequestResponse if the ID is missing or not a valid integer.
   */
  private int getParamId(Context ctx) throws BadRequestResponse {
    return ctx.pathParamAsClass("id", Integer.class)
        .getOrThrow(e -> new BadRequestResponse("Invalid ID format. Must be a number."));
  }
}
