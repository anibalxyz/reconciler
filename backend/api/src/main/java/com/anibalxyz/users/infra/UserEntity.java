package com.anibalxyz.users.infra;

import com.anibalxyz.users.domain.Email;
import com.anibalxyz.users.domain.PasswordHash;
import com.anibalxyz.users.domain.User;
import jakarta.persistence.*;
import java.time.LocalDateTime;
import org.hibernate.annotations.CurrentTimestamp;
import org.hibernate.generator.EventType;

/**
 * Represents the persistence model for a User, mapped to the "users" table.
 *
 * <p>This class is a JPA entity used by the infrastructure layer to interact with the database. It
 * contains mappers ({@link #fromDomain(User)} and {@link #toDomain()}) to convert between the rich
 * {@link User} domain model and this flat, persistence-oriented entity.
 *
 * @author Generated by AI
 */
@Entity
@Table(name = "users")
public class UserEntity {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  @Column(name = "id")
  private Integer id;

  @Column(name = "name", nullable = false, length = 100)
  private String name;

  @Column(name = "email", nullable = false, unique = true, length = 255)
  private String email;

  @Column(name = "password_hash", nullable = false, length = 255)
  private String passwordHash;

  @CurrentTimestamp(event = EventType.INSERT)
  @Column(name = "created_at")
  private LocalDateTime createdAt;

  @CurrentTimestamp
  @Column(name = "updated_at")
  private LocalDateTime updatedAt;

  /** Default constructor required by JPA. */
  public UserEntity() {}

  /** Fully-parameterized constructor. */
  public UserEntity(
      Integer id,
      String name,
      String email,
      String passwordHash,
      LocalDateTime createdAt,
      LocalDateTime updatedAt) {
    this.id = id;
    this.name = name;
    this.email = email;
    this.passwordHash = passwordHash;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  /**
   * Creates a {@link UserEntity} from a {@link User} domain object. This static factory method is
   * used before persisting data.
   *
   * @param user The domain object to convert.
   * @return A new {@link UserEntity} instance.
   */
  public static UserEntity fromDomain(User user) {
    return new UserEntity(
        user.getId(),
        user.getName(),
        user.getEmail().value(),
        user.getPasswordHash().value(),
        user.getCreatedAt(),
        user.getUpdatedAt());
  }

  /**
   * Converts this entity into a {@link User} domain object. This method is used after retrieving
   * data from the database.
   *
   * @return A new {@link User} domain object instance.
   */
  public User toDomain() {
    return new User(
        id, name, new Email(email), new PasswordHash(passwordHash), createdAt, updatedAt);
  }

  /**
   * Returns the unique identifier of the user.
   *
   * @return The user's ID.
   */
  public Integer getId() {
    return id;
  }

  /**
   * Sets the unique identifier of the user.
   *
   * @param id The new user ID.
   */
  public void setId(Integer id) {
    this.id = id;
  }

  /**
   * Returns the name of the user.
   *
   * @return The user's name.
   */
  public String getName() {
    return name;
  }

  /**
   * Sets the name of the user.
   *
   * @param name The new user name.
   */
  public void setName(String name) {
    this.name = name;
  }

  /**
   * Returns the email address of the user.
   *
   * @return The user's email.
   */
  public String getEmail() {
    return email;
  }

  /**
   * Sets the email address of the user.
   *
   * @param email The new user email.
   */
  public void setEmail(String email) {
    this.email = email;
  }

  /**
   * Returns the hashed password of the user.
   *
   * @return The user's password hash.
   */
  public String getPasswordHash() {
    return passwordHash;
  }

  /**
   * Sets the hashed password of the user.
   *
   * @param passwordHash The new password hash.
   */
  public void setPasswordHash(String passwordHash) {
    this.passwordHash = passwordHash;
  }

  /**
   * Returns the creation timestamp of the user.
   *
   * @return The creation timestamp.
   */
  public LocalDateTime getCreatedAt() {
    return createdAt;
  }

  /**
   * Sets the creation timestamp of the user.
   *
   * @param createdAt The new creation timestamp.
   */
  public void setCreatedAt(LocalDateTime createdAt) {
    this.createdAt = createdAt;
  }

  /**
   * Returns the last update timestamp of the user.
   *
   * @return The last update timestamp.
   */
  public LocalDateTime getUpdatedAt() {
    return updatedAt;
  }

  /**
   * Sets the last update timestamp of the user.
   *
   * @param updatedAt The new update timestamp.
   */
  public void setUpdatedAt(LocalDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }
}
