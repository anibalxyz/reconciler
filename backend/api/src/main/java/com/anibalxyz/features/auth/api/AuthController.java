package com.anibalxyz.features.auth.api;

import com.anibalxyz.features.auth.api.in.LoginRequest;
import com.anibalxyz.features.auth.api.out.AuthResponse;
import com.anibalxyz.features.auth.application.AuthResult;
import com.anibalxyz.features.auth.application.AuthService;
import com.anibalxyz.features.auth.domain.RefreshToken;
import io.javalin.http.Context;
import io.javalin.http.Cookie;
import io.javalin.http.SameSite;
import java.time.Instant;

/**
 * Implements the {@link AuthApi} interface for handling authentication-related HTTP requests.
 *
 * <p>This controller provides endpoints for user login and token refreshing. It delegates
 * authentication logic to the {@link AuthService} and handles request validation and response
 * formatting, including setting secure cookies for refresh tokens.
 *
 * @author Generated by AI
 */
public class AuthController implements AuthApi {
  private final AuthService authService;

  /**
   * Constructs an AuthController with the given authentication service.
   *
   * @param authService The application service for authentication operations.
   */
  public AuthController(AuthService authService) {
    this.authService = authService;
  }

  /** {@inheritDoc} */
  @Override
  public void login(Context ctx) {
    LoginRequest request =
        ctx.bodyValidator(LoginRequest.class)
            .check(r -> r.email() != null && !r.email().isBlank(), "Email is required")
            .check(r -> r.password() != null && !r.password().isBlank(), "Password is required")
            .get();
    AuthResult authResult = authService.authenticateUser(request);

    setRefreshTokenCookie(ctx, authResult.refreshToken());
    ctx.status(200).json(new AuthResponse(authResult.accessToken()));
  }

  /** {@inheritDoc} */
  @Override
  public void refresh(Context ctx) {
    String refreshTokenFromCookie = ctx.cookie("refreshToken");

    AuthResult authResult = authService.refreshTokens(refreshTokenFromCookie);

    setRefreshTokenCookie(ctx, authResult.refreshToken());
    ctx.status(200).json(new AuthResponse(authResult.accessToken()));
  }

  /**
   * Sets the refresh token as a secure, HttpOnly cookie in the response.
   *
   * @param ctx The Javalin context.
   * @param refreshToken The refresh token to be set in the cookie.
   */
  private void setRefreshTokenCookie(Context ctx, RefreshToken refreshToken) {
    long maxAgeInSeconds =
        Math.max(0, refreshToken.expiryDate().getEpochSecond() - Instant.now().getEpochSecond());

    boolean isProduction = "prod".equals(ctx.attribute("APP_ENV"));
    SameSite site = SameSite.STRICT; // TODO: check

    Cookie cookie =
        new Cookie(
            "refreshToken",
            refreshToken.token(),
            "/",
            (int) maxAgeInSeconds,
            isProduction,
            0,
            true, // HttpOnly
            null, // Comment
            null, // Domain
            site);
    ctx.cookie(cookie);
  }
}
