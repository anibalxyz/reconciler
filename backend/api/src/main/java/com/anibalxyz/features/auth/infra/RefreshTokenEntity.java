package com.anibalxyz.features.auth.infra;

import com.anibalxyz.features.auth.domain.RefreshToken;
import com.anibalxyz.features.users.infra.UserEntity;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;
import java.time.Instant;

/**
 * Represents the persistence model for a RefreshToken, mapped to the "refresh_tokens" table.
 *
 * <p>This class is a JPA entity used by the infrastructure layer. It contains mappers to convert
 * between the rich {@link RefreshToken} domain model and this persistence-oriented entity.
 *
 * @author Generated by AI
 */
@Entity
@Table(name = "refresh_tokens")
public class RefreshTokenEntity {

  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  @Column(name = "token", nullable = false, unique = true)
  private String token;

  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "user_id", nullable = false)
  private UserEntity user;

  @Column(name = "expiry_date", nullable = false)
  private Instant expiryDate;

  @Column(name = "revoked", nullable = false)
  private boolean revoked;

  /** Default constructor required by JPA. */
  public RefreshTokenEntity() {}

  /**
   * Creates a {@link RefreshTokenEntity} from a {@link RefreshToken} domain object.
   *
   * @param domain The domain object to convert.
   * @return A new {@link RefreshTokenEntity} instance.
   */
  public static RefreshTokenEntity fromDomain(RefreshToken domain) {
    var entity = new RefreshTokenEntity();
    entity.id = domain.id();
    entity.token = domain.token();
    entity.user = UserEntity.fromDomain(domain.user());
    entity.expiryDate = domain.expiryDate();
    entity.revoked = domain.revoked();
    return entity;
  }

  /**
   * Converts this entity into a {@link RefreshToken} domain object.
   *
   * @return A new {@link RefreshToken} domain object instance.
   */
  public RefreshToken toDomain() {
    return new RefreshToken(id, token, user.toDomain(), expiryDate, revoked);
  }

  /**
   * @return The unique identifier of the refresh token.
   */
  public Long getId() {
    return id;
  }

  /**
   * @return The unique, randomly generated token string.
   */
  public String getToken() {
    return token;
  }

  /**
   * @return The user entity to whom this token belongs.
   */
  public UserEntity getUser() {
    return user;
  }
}
