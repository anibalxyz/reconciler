package com.anibalxyz.features.common.api.routing;

import com.anibalxyz.features.common.api.Role;
import io.javalin.Javalin;
import io.javalin.http.Handler;

/**
 * A utility for defining a group of routes under a common path prefix.
 *
 * <p>This class provides a fluent API to chain route definitions (e.g., get, post), making the
 * registration of related endpoints more concise and readable. For example, all routes starting
 * with "/users" can be defined together.
 *
 * @author Generated by AI
 */
public class RouteGroup {
  private static final Role DEFAULT_ROLE = Role.GUEST;

  private final String basePath;
  private final Javalin server;

  /**
   * Constructs a new RouteGroup.
   *
   * @param basePath The common path prefix for all routes in this group (e.g., "/users").
   * @param server The Javalin instance to which routes will be added.
   */
  public RouteGroup(String basePath, Javalin server) {
    this.basePath = basePath;
    this.server = server;
  }

  /**
   * Registers a GET handler for a subpath within the group, with specific roles.
   *
   * @param path The subpath (e.g., "/{id}").
   * @param handler The request handler.
   * @param roles The roles required to access this endpoint.
   * @return This {@link RouteGroup} instance for method chaining.
   */
  public RouteGroup get(String path, Handler handler, Role... roles) {
    server.get(basePath + path, handler, roles);
    return this;
  }

  /**
   * Registers a GET handler for a subpath within the group, with the default role (GUEST).
   *
   * @param path The subpath (e.g., "/{id}").
   * @param handler The request handler.
   * @return This {@link RouteGroup} instance for method chaining.
   */
  public RouteGroup get(String path, Handler handler) {
    get(path, handler, DEFAULT_ROLE);
    return this;
  }

  /**
   * Registers a GET handler for the base path of the group, with specific roles.
   *
   * @param handler The request handler.
   * @param roles The roles required to access this endpoint.
   * @return This {@link RouteGroup} instance for method chaining.
   */
  public RouteGroup get(Handler handler, Role... roles) {
    get("", handler, roles);
    return this;
  }

  /**
   * Registers a GET handler for the base path of the group, with the default role (GUEST).
   *
   * @param handler The request handler.
   * @return This {@link RouteGroup} instance for method chaining.
   */
  public RouteGroup get(Handler handler) {
    get("", handler);
    return this;
  }

  /**
   * Registers a POST handler for a subpath within the group, with specific roles.
   *
   * @param path The subpath (e.g., "/login").
   * @param handler The request handler.
   * @param roles The roles required to access this endpoint.
   * @return This {@link RouteGroup} instance for method chaining.
   */
  public RouteGroup post(String path, Handler handler, Role... roles) {
    server.post(basePath + path, handler, roles);
    return this;
  }

  /**
   * Registers a POST handler for a subpath within the group, with the default role (GUEST).
   *
   * @param path The subpath (e.g., "/login").
   * @param handler The request handler.
   * @return This {@link RouteGroup} instance for method chaining.
   */
  public RouteGroup post(String path, Handler handler) {
    post(path, handler, DEFAULT_ROLE);
    return this;
  }

  /**
   * Registers a POST handler for the base path of the group, with specific roles.
   *
   * @param handler The request handler.
   * @param roles The roles required to access this endpoint.
   * @return This {@link RouteGroup} instance for method chaining.
   */
  public RouteGroup post(Handler handler, Role... roles) {
    post("", handler, roles);
    return this;
  }

  /**
   * Registers a POST handler for the base path of the group, with the default role (GUEST).
   *
   * @param handler The request handler.
   * @return This {@link RouteGroup} instance for method chaining.
   */
  public RouteGroup post(Handler handler) {
    post("", handler);
    return this;
  }

  /**
   * Registers a PUT handler for a subpath within the group, with specific roles.
   *
   * @param path The subpath (e.g., "/{id}").
   * @param handler The request handler.
   * @param roles The roles required to access this endpoint.
   * @return This {@link RouteGroup} instance for method chaining.
   */
  public RouteGroup put(String path, Handler handler, Role... roles) {
    server.put(basePath + path, handler, roles);
    return this;
  }

  /**
   * Registers a PUT handler for a subpath within the group, with the default role (GUEST).
   *
   * @param path The subpath (e.g., "/{id}").
   * @param handler The request handler.
   * @return This {@link RouteGroup} instance for method chaining.
   */
  public RouteGroup put(String path, Handler handler) {
    put(path, handler, DEFAULT_ROLE);
    return this;
  }

  /**
   * Registers a PUT handler for the base path of the group, with specific roles.
   *
   * @param handler The request handler.
   * @param roles The roles required to access this endpoint.
   * @return This {@link RouteGroup} instance for method chaining.
   */
  public RouteGroup put(Handler handler, Role... roles) {
    put("", handler, roles);
    return this;
  }

  /**
   * Registers a PUT handler for the base path of the group, with the default role (GUEST).
   *
   * @param handler The request handler.
   * @return This {@link RouteGroup} instance for method chaining.
   */
  public RouteGroup put(Handler handler) {
    put("", handler);
    return this;
  }

  /**
   * Registers a DELETE handler for a subpath within the group, with specific roles.
   *
   * @param path The subpath (e.g., "/{id}").
   * @param handler The request handler.
   * @param roles The roles required to access this endpoint.
   * @return This {@link RouteGroup} instance for method chaining.
   */
  public RouteGroup delete(String path, Handler handler, Role... roles) {
    server.delete(basePath + path, handler, roles);
    return this;
  }

  /**
   * Registers a DELETE handler for a subpath within the group, with the default role (GUEST).
   *
   * @param path The subpath (e.g., "/{id}").
   * @param handler The request handler.
   * @return This {@link RouteGroup} instance for method chaining.
   */
  public RouteGroup delete(String path, Handler handler) {
    delete(path, handler, DEFAULT_ROLE);
    return this;
  }

  /**
   * Registers a DELETE handler for the base path of the group, with specific roles.
   *
   * @param handler The request handler.
   * @param roles The roles required to access this endpoint.
   * @return This {@link RouteGroup} instance for method chaining.
   */
  public RouteGroup delete(Handler handler, Role... roles) {
    delete("", handler, roles);
    return this;
  }

  /**
   * Registers a DELETE handler for the base path of the group, with the default role (GUEST).
   *
   * @param handler The request handler.
   * @return This {@link RouteGroup} instance for method chaining.
   */
  public RouteGroup delete(Handler handler) {
    delete("", handler);
    return this;
  }
}
