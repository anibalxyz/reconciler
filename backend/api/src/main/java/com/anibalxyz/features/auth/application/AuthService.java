package com.anibalxyz.features.auth.application;

import com.anibalxyz.features.auth.application.exception.InvalidCredentialsException;
import com.anibalxyz.features.auth.application.in.LoginPayload;
import com.anibalxyz.features.common.application.exception.ResourceNotFoundException;
import com.anibalxyz.features.users.application.UserService;
import com.anibalxyz.features.users.domain.User;

/**
 * Application service for authentication-related use cases.
 *
 * <p>This class handles user authentication, including credential verification and JWT token
 * generation. It orchestrates interactions with the user service and JWT library to provide secure
 * authentication flows.
 *
 * @author Generated by AI
 */
public class AuthService {
  private final UserService userService;
  private final JwtService jwtService;

  /**
   * Constructs an AuthService with its required dependencies.
   *
   * @param userService The user service for retrieving user details.
   * @param jwtService The JWT service for token generation and validation.
   */
  public AuthService(UserService userService, JwtService jwtService) {
    this.userService = userService;
    this.jwtService = jwtService;
  }

  /**
   * Authenticates a user based on the provided login payload.
   *
   * <p>This method verifies the user's credentials and, if valid, generates a JWT token. It handles
   * cases where the user is not found or the password is incorrect by throwing a generic {@code
   * InvalidCredentialsException} to prevent user enumeration.
   *
   * @param payload The login request containing the user's email and password.
   * @return A JWT token if authentication is successful.
   * @throws InvalidCredentialsException if the email or password is incorrect.
   */
  public String authenticateUser(LoginPayload payload) throws InvalidCredentialsException {
    try {
      User user = userService.getUserByEmail(payload.email());
      if (user.getPasswordHash().matches(payload.password())) {
        return jwtService.generateToken(user.getId());
      } else {
        throw new InvalidCredentialsException("Invalid credentials");
      }
    } catch (ResourceNotFoundException e) {
      throw new InvalidCredentialsException("Invalid credentials");
    }
  }
}
