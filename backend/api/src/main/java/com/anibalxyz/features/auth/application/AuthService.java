package com.anibalxyz.features.auth.application;

import com.anibalxyz.features.auth.application.exception.InvalidCredentialsException;
import com.anibalxyz.features.auth.application.in.LoginPayload;
import com.anibalxyz.features.common.application.exception.ResourceNotFoundException;
import com.anibalxyz.features.users.application.UserService;
import com.anibalxyz.features.users.domain.User;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.time.Instant;
import java.util.Date;
import java.util.UUID;

/**
 * Application service for authentication-related use cases.
 *
 * <p>This class handles user authentication, including credential verification and JWT token
 * generation. It orchestrates interactions with the user service and JWT library to provide
 * secure authentication flows.
 *
 * @author Generated by AI
 */
public class AuthService {
  private final Key key;
  private final String issuer;
  private final long expirationMinutes;

  private final UserService userService;

  /**
   * Constructs an AuthService with its required dependencies.
   *
   * @param env The authentication environment configuration.
   * @param userService The user service for retrieving user details.
   * @throws IllegalArgumentException if the JWT secret is invalid or too short.
   */
  public AuthService(AuthEnvironment env, UserService userService) {
    // TODO: check if this logic belongs here
    if (env.JWT_SECRET() == null || env.JWT_SECRET().isBlank()) {
      throw new IllegalArgumentException("JWT_SECRET must not be null or empty");
    }
    byte[] secretBytes = env.JWT_SECRET().getBytes(StandardCharsets.UTF_8);
    if (secretBytes.length < 32) {
      throw new IllegalArgumentException("JWT_SECRET must be at least 256 bits (32 bytes)");
    }

    this.key = Keys.hmacShaKeyFor(secretBytes);
    this.issuer = env.JWT_ISSUER();
    this.expirationMinutes = env.JWT_EXPIRATION_TIME().toMinutes();

    this.userService = userService;
  }

  /**
   * Generates a JSON Web Token (JWT) for the given user.
   *
   * <p>The generated token includes the user's ID as the subject, a unique ID, issue and expiration
   * timestamps, and the configured issuer.
   *
   * @param user The user for whom to generate the token.
   * @return A signed JWT string.
   */
  public String generateToken(User user) {
    Instant now = Instant.now();
    String subject = String.valueOf(user.getId());

    return Jwts.builder()
        .id(UUID.randomUUID().toString())
        .subject(subject)
        .issuedAt(Date.from(now))
        .expiration(Date.from(now.plusSeconds(expirationMinutes * 60)))
        .issuer(issuer)
        .signWith(key)
        .compact();
  }

  /**
   * Authenticates a user based on the provided login payload.
   *
   * <p>This method verifies the user's credentials and, if valid, generates a JWT token.
   * It handles cases where the user is not found or the password is incorrect by throwing
   * a generic {@code InvalidCredentialsException} to prevent user enumeration.
   *
   * @param payload The login request containing the user's email and password.
   * @return A JWT token if authentication is successful.
   * @throws InvalidCredentialsException if the email or password is incorrect.
   */
  public String authenticateUser(LoginPayload payload) throws InvalidCredentialsException {
    try {
      User user = userService.getUserByEmail(payload.email());
      if (user.getPasswordHash().matches(payload.password())) {
        return generateToken(user);
      } else {
        throw new InvalidCredentialsException("Invalid credentials");
      }
    } catch (ResourceNotFoundException e) {
      throw new InvalidCredentialsException("Invalid credentials");
    }
  }
}
