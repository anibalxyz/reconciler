package com.anibalxyz.features.users.api;

import com.anibalxyz.features.common.application.exception.ResourceNotFoundException;
import com.anibalxyz.features.users.api.in.UserCreateRequest;
import com.anibalxyz.features.users.api.in.UserUpdateRequest;
import com.anibalxyz.features.users.api.out.UserCreateResponse;
import com.anibalxyz.features.users.api.out.UserDetailResponse;
import com.anibalxyz.server.dto.ErrorResponse;
import com.anibalxyz.server.openapi.ErrorResponseExamples;
import io.javalin.http.BadRequestResponse;
import io.javalin.http.Context;
import io.javalin.openapi.*;
import io.javalin.openapi.OpenApiSecurity;
import io.javalin.validation.ValidationException;

/**
 * Defines the API contract for user-related operations.
 *
 * <p>This interface uses {@link OpenApi} annotations to document the REST endpoints, serving as a
 * single source of truth for the API's specification. The {@link UserController} provides the
 * concrete implementation for these operations.
 *
 * @author Generated by AI
 */
public interface UserApi {

  /**
   * Retrieves a list of all users.
   *
   * @param ctx The context for the HTTP request and response.
   */
  @OpenApi(
      summary = "Get all users",
      operationId = "getAllUsers",
      path = "/users",
      methods = HttpMethod.GET,
      tags = {"Users"},
      security = @OpenApiSecurity(name = "bearerAuth"),
      responses = {
        @OpenApiResponse(
            status = "200",
            description = "A list of all users.",
            content = @OpenApiContent(from = UserDetailResponse[].class)),
        @OpenApiResponse(
            status = "401",
            description = "Authentication information is missing or invalid.",
            content =
                @OpenApiContent(
                    from = ErrorResponse.class,
                    example = ErrorResponseExamples.UNAUTHORIZED)),
        @OpenApiResponse(
            status = "500",
            description = "Internal server error.",
            content =
                @OpenApiContent(
                    from = ErrorResponse.class,
                    example = ErrorResponseExamples.INTERNAL_SERVER_ERROR))
      })
  void getAllUsers(Context ctx);

  /**
   * Retrieves a user by their unique identifier.
   *
   * @param ctx The context for the HTTP request and response, containing the user ID as a path
   *     parameter.
   */
  @OpenApi(
      summary = "Get a user by ID",
      operationId = "getUserById",
      path = "/users/{id}",
      methods = HttpMethod.GET,
      tags = {"Users"},
      security = @OpenApiSecurity(name = "bearerAuth"),
      pathParams = {
        @OpenApiParam(
            name = "id",
            type = Integer.class,
            description = "The unique identifier of the user.",
            required = true,
            example = "1")
      },
      responses = {
        @OpenApiResponse(
            status = "200",
            description = "Successfully retrieved the user.",
            content = @OpenApiContent(from = UserDetailResponse.class)),
        @OpenApiResponse(
            status = "401",
            description = "Authentication information is missing or invalid.",
            content =
                @OpenApiContent(
                    from = ErrorResponse.class,
                    example = ErrorResponseExamples.UNAUTHORIZED)),
        @OpenApiResponse(
            status = "400",
            description = "Invalid ID format supplied.",
            content =
                @OpenApiContent(
                    from = ErrorResponse.class,
                    example = ErrorResponseExamples.INVALID_ID)),
        @OpenApiResponse(
            status = "404",
            description = "User with the specified ID not found.",
            content =
                @OpenApiContent(
                    from = ErrorResponse.class,
                    example = ErrorResponseExamples.USER_NOT_FOUND))
      })
  void getUserById(Context ctx);

  /**
   * Creates a new user.
   *
   * @param ctx The context for the HTTP request and response, containing the user creation request
   *     body.
   */
  @OpenApi(
      summary = "Create a new user",
      operationId = "createUser",
      path = "/users",
      methods = HttpMethod.POST,
      tags = {"Users"},
      requestBody =
          @OpenApiRequestBody(
              description = "The user to create.",
              required = true,
              content = @OpenApiContent(from = UserCreateRequest.class)),
      responses = {
        @OpenApiResponse(
            status = "201",
            description = "User created successfully.",
            content = @OpenApiContent(from = UserCreateResponse.class)),
        @OpenApiResponse(
            status = "400",
            description =
                "Invalid input data, such as a duplicate email, missing fields, or invalid password format.",
            content =
                @OpenApiContent(
                    from = ErrorResponse.class,
                    example = ErrorResponseExamples.CREATE_USER_BAD_REQUEST))
      })
  void createUser(Context ctx);

  /**
   * Updates an existing user identified by their unique ID.
   *
   * @param ctx The context for the HTTP request and response, containing the user ID as a path
   *     parameter and the user update request body.
   * @throws IllegalArgumentException if the provided arguments are invalid.
   * @throws ValidationException if validation of the request body fails.
   * @throws ResourceNotFoundException if the user with the specified ID is not found.
   * @throws BadRequestResponse if the request is malformed or invalid.
   */
  @OpenApi(
      summary = "Update an existing user",
      operationId = "updateUserById",
      path = "/users/{id}",
      methods = HttpMethod.PUT,
      tags = {"Users"},
      security = @OpenApiSecurity(name = "bearerAuth"),
      pathParams = {
        @OpenApiParam(
            name = "id",
            type = Integer.class,
            description = "The unique identifier of the user to update.",
            required = true,
            example = "1")
      },
      requestBody =
          @OpenApiRequestBody(
              description = "The user data to update. At least one field must be provided.",
              required = true,
              content = @OpenApiContent(from = UserUpdateRequest.class)),
      responses = {
        @OpenApiResponse(
            status = "200",
            description = "User updated successfully.",
            content = @OpenApiContent(from = UserDetailResponse.class)),
        @OpenApiResponse(
            status = "401",
            description = "Authentication information is missing or invalid.",
            content =
                @OpenApiContent(
                    from = ErrorResponse.class,
                    example = ErrorResponseExamples.UNAUTHORIZED)),
        @OpenApiResponse(
            status = "400",
            description = "Invalid input data, empty payload, or duplicate email.",
            content =
                @OpenApiContent(
                    from = ErrorResponse.class,
                    example = ErrorResponseExamples.UPDATE_USER_BAD_REQUEST)),
        @OpenApiResponse(
            status = "404",
            description = "User with the specified ID not found.",
            content =
                @OpenApiContent(
                    from = ErrorResponse.class,
                    example = ErrorResponseExamples.USER_NOT_FOUND))
      })
  void updateUserById(Context ctx);

  /**
   * Deletes a user by their unique identifier.
   *
   * @param ctx The context for the HTTP request and response, containing the user ID as a path
   *     parameter.
   */
  @OpenApi(
      summary = "Delete a user by ID",
      operationId = "deleteUserById",
      path = "/users/{id}",
      methods = HttpMethod.DELETE,
      tags = {"Users"},
      security = @OpenApiSecurity(name = "bearerAuth"),
      pathParams = {
        @OpenApiParam(
            name = "id",
            type = Integer.class,
            description = "The unique identifier of the user to delete.",
            required = true,
            example = "1")
      },
      responses = {
        @OpenApiResponse(status = "204", description = "User deleted successfully."),
        @OpenApiResponse(
            status = "401",
            description = "Authentication information is missing or invalid.",
            content =
                @OpenApiContent(
                    from = ErrorResponse.class,
                    example = ErrorResponseExamples.UNAUTHORIZED)),
        @OpenApiResponse(
            status = "404",
            description = "User with the specified ID not found.",
            content =
                @OpenApiContent(
                    from = ErrorResponse.class,
                    example = ErrorResponseExamples.USER_NOT_FOUND))
      })
  void deleteUserById(Context ctx);
}
