package com.anibalxyz.features.users.domain;

import java.time.Instant;

/**
 * Represents a User in the domain.
 *
 * <p>This class is the root entity for the User aggregate. It is designed to be immutable; any
 * modification returns a new {@code User} instance with the updated value using the {@code with...}
 * methods. This ensures predictable state management and thread safety.
 *
 * @author Generated by AI
 */
public class User {
  public static final int NAME_MAX_LENGTH = 100;

  private final Integer id;
  private final String name;
  private final Email email;
  private final PasswordHash passwordHash;
  private final Instant createdAt;
  private final Instant updatedAt;

  /**
   * Fully-parameterized constructor to reconstitute a User object, typically from a data store.
   *
   * @param id The unique identifier of the user.
   * @param name The user's name.
   * @param email The user's email address.
   * @param passwordHash The user's hashed password.
   * @param createdAt The timestamp of when the user was created.
   * @param updatedAt The timestamp of the last update.
   */
  public User(
      Integer id,
      String name,
      Email email,
      PasswordHash passwordHash,
      Instant createdAt,
      Instant updatedAt) {
    this.id = id;
    this.name = name;
    this.email = email;
    this.passwordHash = passwordHash;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  /**
   * Constructor for creating a new user that has not yet been persisted. The ID, createdAt, and
   * updatedAt fields are initialized to null.
   *
   * @param name The user's name.
   * @param email The user's email address.
   * @param passwordHash The user's hashed password.
   */
  public User(String name, Email email, PasswordHash passwordHash) {
    this(null, name, email, passwordHash, null, null);
  }

  /**
   * Creates a new User instance with an updated ID.
   *
   * @param id The new ID.
   * @return A new {@code User} instance.
   */
  public User withId(Integer id) {
    return new User(id, name, email, passwordHash, createdAt, updatedAt);
  }

  /**
   * Creates a new User instance with an updated name.
   *
   * @param name The new name.
   * @return A new {@code User} instance.
   */
  public User withName(String name) {
    return new User(id, name, email, passwordHash, createdAt, updatedAt);
  }

  /**
   * Creates a new User instance with an updated email.
   *
   * @param email The new email.
   * @return A new {@code User} instance.
   */
  public User withEmail(Email email) {
    return new User(id, name, email, passwordHash, createdAt, updatedAt);
  }

  /**
   * Creates a new User instance with an updated password hash.
   *
   * @param passwordHash The new password hash.
   * @return A new {@code User} instance.
   */
  public User withPasswordHash(PasswordHash passwordHash) {
    return new User(id, name, email, passwordHash, createdAt, updatedAt);
  }

  /**
   * Creates a new User instance with an updated creation timestamp.
   *
   * @param createdAt The new creation timestamp.
   * @return A new {@code User} instance.
   */
  public User withCreatedAt(Instant createdAt) {
    return new User(id, name, email, passwordHash, createdAt, updatedAt);
  }

  /**
   * Creates a new User instance with an updated modification timestamp.
   *
   * @param updatedAt The new modification timestamp.
   * @return A new {@code User} instance.
   */
  public User withUpdatedAt(Instant updatedAt) {
    return new User(id, name, email, passwordHash, createdAt, updatedAt);
  }

  /**
   * @return The unique identifier of the user. Can be null for a new user.
   */
  public Integer getId() {
    return id;
  }

  /**
   * @return The name of the user.
   */
  public String getName() {
    return name;
  }

  /**
   * @return The email address of the user.
   */
  public Email getEmail() {
    return email;
  }

  /**
   * @return The hashed password of the user.
   */
  public PasswordHash getPasswordHash() {
    return passwordHash;
  }

  /**
   * @return The timestamp when the user was created. Can be null for a new user.
   */
  public Instant getCreatedAt() {
    return createdAt;
  }

  /**
   * @return The timestamp of the last update. Can be null for a new user.
   */
  public Instant getUpdatedAt() {
    return updatedAt;
  }

  /** Returns a string representation of the user, masking the password hash. */
  @Override
  public String toString() {
    return
"""
User(id=%s, name=%s, email=%s, passwordHash=%s, createdAt=%s, updatedAt=%s)"""
        .formatted(id, name, email.value(), passwordHash.toString(), createdAt, updatedAt);
  }

  /**
   * Indicates whether some other object is "equal to" this one.
   *
   * @param o the reference object with which to compare.
   * @return {@code true} if this object is the same as the obj argument; {@code false} otherwise.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) return true;
    if (o == null || getClass() != o.getClass()) return false;

    User user = (User) o;

    return java.util.Objects.equals(id, user.id)
        && java.util.Objects.equals(name, user.name)
        && java.util.Objects.equals(email, user.email)
        && java.util.Objects.equals(passwordHash, user.passwordHash)
        && java.util.Objects.equals(createdAt, user.createdAt)
        && java.util.Objects.equals(updatedAt, user.updatedAt);
  }
}
